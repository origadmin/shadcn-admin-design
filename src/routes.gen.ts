/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from "@tanstack/react-router";

// Import Routes

import { Route as rootRoute } from "./routes/__root";
import { Route as AuthorizationImport } from "./routes/_authorization";
import { Route as AuthorizationIndexImport } from "./routes/_authorization/index";
import { Route as ErrorsComingSoonImport } from "./routes/(Errors)/coming-soon";
import { Route as AuthSignUpImport } from "./routes/(Auth)/sign-up";
import { Route as AuthSignIn2Import } from "./routes/(Auth)/sign-in-2";
import { Route as AuthSignInImport } from "./routes/(Auth)/sign-in";
import { Route as AuthOtpImport } from "./routes/(Auth)/otp";
import { Route as AuthForgotPasswordImport } from "./routes/(Auth)/forgot-password";
import { Route as AuthorizationDashboardIndexImport } from "./routes/_authorization/dashboard/index";
import { Route as AuthorizationExamplesListIndexImport } from "./routes/_authorization/examples/list/index";

// Create Virtual Routes

const Errors503LazyImport = createFileRoute("/(Errors)/503")();
const Errors500LazyImport = createFileRoute("/(Errors)/500")();
const Errors404LazyImport = createFileRoute("/(Errors)/404")();
const Errors403LazyImport = createFileRoute("/(Errors)/403")();
const Errors401LazyImport = createFileRoute("/(Errors)/401")();
const AuthorizationTasksIndexLazyImport = createFileRoute(
  "/_authorization/tasks/",
)();
const AuthorizationChatsIndexLazyImport = createFileRoute(
  "/_authorization/chats/",
)();
const AuthorizationAppsIndexLazyImport = createFileRoute(
  "/_authorization/apps/",
)();
const AuthorizationSystemUsersLazyImport = createFileRoute(
  "/_authorization/system/users",
)();
const AuthorizationSystemUserLazyImport = createFileRoute(
  "/_authorization/system/user",
)();
const AuthorizationSystemSettingsLazyImport = createFileRoute(
  "/_authorization/system/settings",
)();
const AuthorizationDashboardSettingsLazyImport = createFileRoute(
  "/_authorization/dashboard/settings",
)();
const AuthorizationDashboardProductsLazyImport = createFileRoute(
  "/_authorization/dashboard/products",
)();
const AuthorizationDashboardOverviewLazyImport = createFileRoute(
  "/_authorization/dashboard/overview",
)();
const AuthorizationDashboardMonitorLazyImport = createFileRoute(
  "/_authorization/dashboard/monitor",
)();
const AuthorizationDashboardCustomersLazyImport = createFileRoute(
  "/_authorization/dashboard/customers",
)();
const AuthorizationExamplesFormSimpleLazyImport = createFileRoute(
  "/_authorization/examples/form/simple",
)();
const AuthorizationExamplesFormBasicLazyImport = createFileRoute(
  "/_authorization/examples/form/basic",
)();
const AuthorizationExamplesFormAdvancedLazyImport = createFileRoute(
  "/_authorization/examples/form/advanced",
)();

// Create/Update Routes

const AuthorizationRoute = AuthorizationImport.update({
  id: "/_authorization",
  getParentRoute: () => rootRoute,
} as any);

const AuthorizationIndexRoute = AuthorizationIndexImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => AuthorizationRoute,
} as any);

const Errors503LazyRoute = Errors503LazyImport.update({
  id: "/(Errors)/503",
  path: "/503",
  getParentRoute: () => rootRoute,
} as any).lazy(() => import("./routes/(Errors)/503.lazy").then((d) => d.Route));

const Errors500LazyRoute = Errors500LazyImport.update({
  id: "/(Errors)/500",
  path: "/500",
  getParentRoute: () => rootRoute,
} as any).lazy(() => import("./routes/(Errors)/500.lazy").then((d) => d.Route));

const Errors404LazyRoute = Errors404LazyImport.update({
  id: "/(Errors)/404",
  path: "/404",
  getParentRoute: () => rootRoute,
} as any).lazy(() => import("./routes/(Errors)/404.lazy").then((d) => d.Route));

const Errors403LazyRoute = Errors403LazyImport.update({
  id: "/(Errors)/403",
  path: "/403",
  getParentRoute: () => rootRoute,
} as any).lazy(() => import("./routes/(Errors)/403.lazy").then((d) => d.Route));

const Errors401LazyRoute = Errors401LazyImport.update({
  id: "/(Errors)/401",
  path: "/401",
  getParentRoute: () => rootRoute,
} as any).lazy(() => import("./routes/(Errors)/401.lazy").then((d) => d.Route));

const ErrorsComingSoonRoute = ErrorsComingSoonImport.update({
  id: "/(Errors)/coming-soon",
  path: "/coming-soon",
  getParentRoute: () => rootRoute,
} as any);

const AuthSignUpRoute = AuthSignUpImport.update({
  id: "/(Auth)/sign-up",
  path: "/sign-up",
  getParentRoute: () => rootRoute,
} as any);

const AuthSignIn2Route = AuthSignIn2Import.update({
  id: "/(Auth)/sign-in-2",
  path: "/sign-in-2",
  getParentRoute: () => rootRoute,
} as any);

const AuthSignInRoute = AuthSignInImport.update({
  id: "/(Auth)/sign-in",
  path: "/sign-in",
  getParentRoute: () => rootRoute,
} as any);

const AuthOtpRoute = AuthOtpImport.update({
  id: "/(Auth)/otp",
  path: "/otp",
  getParentRoute: () => rootRoute,
} as any);

const AuthForgotPasswordRoute = AuthForgotPasswordImport.update({
  id: "/(Auth)/forgot-password",
  path: "/forgot-password",
  getParentRoute: () => rootRoute,
} as any);

const AuthorizationTasksIndexLazyRoute =
  AuthorizationTasksIndexLazyImport.update({
    id: "/tasks/",
    path: "/tasks/",
    getParentRoute: () => AuthorizationRoute,
  } as any).lazy(() =>
    import("./routes/_authorization/tasks/index.lazy").then((d) => d.Route),
  );

const AuthorizationChatsIndexLazyRoute =
  AuthorizationChatsIndexLazyImport.update({
    id: "/chats/",
    path: "/chats/",
    getParentRoute: () => AuthorizationRoute,
  } as any).lazy(() =>
    import("./routes/_authorization/chats/index.lazy").then((d) => d.Route),
  );

const AuthorizationAppsIndexLazyRoute = AuthorizationAppsIndexLazyImport.update(
  {
    id: "/apps/",
    path: "/apps/",
    getParentRoute: () => AuthorizationRoute,
  } as any,
).lazy(() =>
  import("./routes/_authorization/apps/index.lazy").then((d) => d.Route),
);

const AuthorizationDashboardIndexRoute =
  AuthorizationDashboardIndexImport.update({
    id: "/dashboard/",
    path: "/dashboard/",
    getParentRoute: () => AuthorizationRoute,
  } as any);

const AuthorizationSystemUsersLazyRoute =
  AuthorizationSystemUsersLazyImport.update({
    id: "/system/users",
    path: "/system/users",
    getParentRoute: () => AuthorizationRoute,
  } as any).lazy(() =>
    import("./routes/_authorization/system/users.lazy").then((d) => d.Route),
  );

const AuthorizationSystemUserLazyRoute =
  AuthorizationSystemUserLazyImport.update({
    id: "/system/user",
    path: "/system/user",
    getParentRoute: () => AuthorizationRoute,
  } as any).lazy(() =>
    import("./routes/_authorization/system/user.lazy").then((d) => d.Route),
  );

const AuthorizationSystemSettingsLazyRoute =
  AuthorizationSystemSettingsLazyImport.update({
    id: "/system/settings",
    path: "/system/settings",
    getParentRoute: () => AuthorizationRoute,
  } as any).lazy(() =>
    import("./routes/_authorization/system/settings.lazy").then((d) => d.Route),
  );

const AuthorizationDashboardSettingsLazyRoute =
  AuthorizationDashboardSettingsLazyImport.update({
    id: "/dashboard/settings",
    path: "/dashboard/settings",
    getParentRoute: () => AuthorizationRoute,
  } as any).lazy(() =>
    import("./routes/_authorization/dashboard/settings.lazy").then(
      (d) => d.Route,
    ),
  );

const AuthorizationDashboardProductsLazyRoute =
  AuthorizationDashboardProductsLazyImport.update({
    id: "/dashboard/products",
    path: "/dashboard/products",
    getParentRoute: () => AuthorizationRoute,
  } as any).lazy(() =>
    import("./routes/_authorization/dashboard/products.lazy").then(
      (d) => d.Route,
    ),
  );

const AuthorizationDashboardOverviewLazyRoute =
  AuthorizationDashboardOverviewLazyImport.update({
    id: "/dashboard/overview",
    path: "/dashboard/overview",
    getParentRoute: () => AuthorizationRoute,
  } as any).lazy(() =>
    import("./routes/_authorization/dashboard/overview.lazy").then(
      (d) => d.Route,
    ),
  );

const AuthorizationDashboardMonitorLazyRoute =
  AuthorizationDashboardMonitorLazyImport.update({
    id: "/dashboard/monitor",
    path: "/dashboard/monitor",
    getParentRoute: () => AuthorizationRoute,
  } as any).lazy(() =>
    import("./routes/_authorization/dashboard/monitor.lazy").then(
      (d) => d.Route,
    ),
  );

const AuthorizationDashboardCustomersLazyRoute =
  AuthorizationDashboardCustomersLazyImport.update({
    id: "/dashboard/customers",
    path: "/dashboard/customers",
    getParentRoute: () => AuthorizationRoute,
  } as any).lazy(() =>
    import("./routes/_authorization/dashboard/customers.lazy").then(
      (d) => d.Route,
    ),
  );

const AuthorizationExamplesListIndexRoute =
  AuthorizationExamplesListIndexImport.update({
    id: "/examples/list/",
    path: "/examples/list/",
    getParentRoute: () => AuthorizationRoute,
  } as any);

const AuthorizationExamplesFormSimpleLazyRoute =
  AuthorizationExamplesFormSimpleLazyImport.update({
    id: "/examples/form/simple",
    path: "/examples/form/simple",
    getParentRoute: () => AuthorizationRoute,
  } as any).lazy(() =>
    import("./routes/_authorization/examples/form/simple.lazy").then(
      (d) => d.Route,
    ),
  );

const AuthorizationExamplesFormBasicLazyRoute =
  AuthorizationExamplesFormBasicLazyImport.update({
    id: "/examples/form/basic",
    path: "/examples/form/basic",
    getParentRoute: () => AuthorizationRoute,
  } as any).lazy(() =>
    import("./routes/_authorization/examples/form/basic.lazy").then(
      (d) => d.Route,
    ),
  );

const AuthorizationExamplesFormAdvancedLazyRoute =
  AuthorizationExamplesFormAdvancedLazyImport.update({
    id: "/examples/form/advanced",
    path: "/examples/form/advanced",
    getParentRoute: () => AuthorizationRoute,
  } as any).lazy(() =>
    import("./routes/_authorization/examples/form/advanced.lazy").then(
      (d) => d.Route,
    ),
  );

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/_authorization": {
      id: "/_authorization";
      path: "";
      fullPath: "";
      preLoaderRoute: typeof AuthorizationImport;
      parentRoute: typeof rootRoute;
    };
    "/(Auth)/forgot-password": {
      id: "/(Auth)/forgot-password";
      path: "/forgot-password";
      fullPath: "/forgot-password";
      preLoaderRoute: typeof AuthForgotPasswordImport;
      parentRoute: typeof rootRoute;
    };
    "/(Auth)/otp": {
      id: "/(Auth)/otp";
      path: "/otp";
      fullPath: "/otp";
      preLoaderRoute: typeof AuthOtpImport;
      parentRoute: typeof rootRoute;
    };
    "/(Auth)/sign-in": {
      id: "/(Auth)/sign-in";
      path: "/sign-in";
      fullPath: "/sign-in";
      preLoaderRoute: typeof AuthSignInImport;
      parentRoute: typeof rootRoute;
    };
    "/(Auth)/sign-in-2": {
      id: "/(Auth)/sign-in-2";
      path: "/sign-in-2";
      fullPath: "/sign-in-2";
      preLoaderRoute: typeof AuthSignIn2Import;
      parentRoute: typeof rootRoute;
    };
    "/(Auth)/sign-up": {
      id: "/(Auth)/sign-up";
      path: "/sign-up";
      fullPath: "/sign-up";
      preLoaderRoute: typeof AuthSignUpImport;
      parentRoute: typeof rootRoute;
    };
    "/(Errors)/coming-soon": {
      id: "/(Errors)/coming-soon";
      path: "/coming-soon";
      fullPath: "/coming-soon";
      preLoaderRoute: typeof ErrorsComingSoonImport;
      parentRoute: typeof rootRoute;
    };
    "/(Errors)/401": {
      id: "/(Errors)/401";
      path: "/401";
      fullPath: "/401";
      preLoaderRoute: typeof Errors401LazyImport;
      parentRoute: typeof rootRoute;
    };
    "/(Errors)/403": {
      id: "/(Errors)/403";
      path: "/403";
      fullPath: "/403";
      preLoaderRoute: typeof Errors403LazyImport;
      parentRoute: typeof rootRoute;
    };
    "/(Errors)/404": {
      id: "/(Errors)/404";
      path: "/404";
      fullPath: "/404";
      preLoaderRoute: typeof Errors404LazyImport;
      parentRoute: typeof rootRoute;
    };
    "/(Errors)/500": {
      id: "/(Errors)/500";
      path: "/500";
      fullPath: "/500";
      preLoaderRoute: typeof Errors500LazyImport;
      parentRoute: typeof rootRoute;
    };
    "/(Errors)/503": {
      id: "/(Errors)/503";
      path: "/503";
      fullPath: "/503";
      preLoaderRoute: typeof Errors503LazyImport;
      parentRoute: typeof rootRoute;
    };
    "/_authorization/": {
      id: "/_authorization/";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof AuthorizationIndexImport;
      parentRoute: typeof AuthorizationImport;
    };
    "/_authorization/dashboard/customers": {
      id: "/_authorization/dashboard/customers";
      path: "/dashboard/customers";
      fullPath: "/dashboard/customers";
      preLoaderRoute: typeof AuthorizationDashboardCustomersLazyImport;
      parentRoute: typeof AuthorizationImport;
    };
    "/_authorization/dashboard/monitor": {
      id: "/_authorization/dashboard/monitor";
      path: "/dashboard/monitor";
      fullPath: "/dashboard/monitor";
      preLoaderRoute: typeof AuthorizationDashboardMonitorLazyImport;
      parentRoute: typeof AuthorizationImport;
    };
    "/_authorization/dashboard/overview": {
      id: "/_authorization/dashboard/overview";
      path: "/dashboard/overview";
      fullPath: "/dashboard/overview";
      preLoaderRoute: typeof AuthorizationDashboardOverviewLazyImport;
      parentRoute: typeof AuthorizationImport;
    };
    "/_authorization/dashboard/products": {
      id: "/_authorization/dashboard/products";
      path: "/dashboard/products";
      fullPath: "/dashboard/products";
      preLoaderRoute: typeof AuthorizationDashboardProductsLazyImport;
      parentRoute: typeof AuthorizationImport;
    };
    "/_authorization/dashboard/settings": {
      id: "/_authorization/dashboard/settings";
      path: "/dashboard/settings";
      fullPath: "/dashboard/settings";
      preLoaderRoute: typeof AuthorizationDashboardSettingsLazyImport;
      parentRoute: typeof AuthorizationImport;
    };
    "/_authorization/system/settings": {
      id: "/_authorization/system/settings";
      path: "/system/settings";
      fullPath: "/system/settings";
      preLoaderRoute: typeof AuthorizationSystemSettingsLazyImport;
      parentRoute: typeof AuthorizationImport;
    };
    "/_authorization/system/user": {
      id: "/_authorization/system/user";
      path: "/system/user";
      fullPath: "/system/user";
      preLoaderRoute: typeof AuthorizationSystemUserLazyImport;
      parentRoute: typeof AuthorizationImport;
    };
    "/_authorization/system/users": {
      id: "/_authorization/system/users";
      path: "/system/users";
      fullPath: "/system/users";
      preLoaderRoute: typeof AuthorizationSystemUsersLazyImport;
      parentRoute: typeof AuthorizationImport;
    };
    "/_authorization/dashboard/": {
      id: "/_authorization/dashboard/";
      path: "/dashboard";
      fullPath: "/dashboard";
      preLoaderRoute: typeof AuthorizationDashboardIndexImport;
      parentRoute: typeof AuthorizationImport;
    };
    "/_authorization/apps/": {
      id: "/_authorization/apps/";
      path: "/apps";
      fullPath: "/apps";
      preLoaderRoute: typeof AuthorizationAppsIndexLazyImport;
      parentRoute: typeof AuthorizationImport;
    };
    "/_authorization/chats/": {
      id: "/_authorization/chats/";
      path: "/chats";
      fullPath: "/chats";
      preLoaderRoute: typeof AuthorizationChatsIndexLazyImport;
      parentRoute: typeof AuthorizationImport;
    };
    "/_authorization/tasks/": {
      id: "/_authorization/tasks/";
      path: "/tasks";
      fullPath: "/tasks";
      preLoaderRoute: typeof AuthorizationTasksIndexLazyImport;
      parentRoute: typeof AuthorizationImport;
    };
    "/_authorization/examples/form/advanced": {
      id: "/_authorization/examples/form/advanced";
      path: "/examples/form/advanced";
      fullPath: "/examples/form/advanced";
      preLoaderRoute: typeof AuthorizationExamplesFormAdvancedLazyImport;
      parentRoute: typeof AuthorizationImport;
    };
    "/_authorization/examples/form/basic": {
      id: "/_authorization/examples/form/basic";
      path: "/examples/form/basic";
      fullPath: "/examples/form/basic";
      preLoaderRoute: typeof AuthorizationExamplesFormBasicLazyImport;
      parentRoute: typeof AuthorizationImport;
    };
    "/_authorization/examples/form/simple": {
      id: "/_authorization/examples/form/simple";
      path: "/examples/form/simple";
      fullPath: "/examples/form/simple";
      preLoaderRoute: typeof AuthorizationExamplesFormSimpleLazyImport;
      parentRoute: typeof AuthorizationImport;
    };
    "/_authorization/examples/list/": {
      id: "/_authorization/examples/list/";
      path: "/examples/list";
      fullPath: "/examples/list";
      preLoaderRoute: typeof AuthorizationExamplesListIndexImport;
      parentRoute: typeof AuthorizationImport;
    };
  }
}

// Create and export the route tree

interface AuthorizationRouteChildren {
  AuthorizationIndexRoute: typeof AuthorizationIndexRoute;
  AuthorizationDashboardCustomersLazyRoute: typeof AuthorizationDashboardCustomersLazyRoute;
  AuthorizationDashboardMonitorLazyRoute: typeof AuthorizationDashboardMonitorLazyRoute;
  AuthorizationDashboardOverviewLazyRoute: typeof AuthorizationDashboardOverviewLazyRoute;
  AuthorizationDashboardProductsLazyRoute: typeof AuthorizationDashboardProductsLazyRoute;
  AuthorizationDashboardSettingsLazyRoute: typeof AuthorizationDashboardSettingsLazyRoute;
  AuthorizationSystemSettingsLazyRoute: typeof AuthorizationSystemSettingsLazyRoute;
  AuthorizationSystemUserLazyRoute: typeof AuthorizationSystemUserLazyRoute;
  AuthorizationSystemUsersLazyRoute: typeof AuthorizationSystemUsersLazyRoute;
  AuthorizationDashboardIndexRoute: typeof AuthorizationDashboardIndexRoute;
  AuthorizationAppsIndexLazyRoute: typeof AuthorizationAppsIndexLazyRoute;
  AuthorizationChatsIndexLazyRoute: typeof AuthorizationChatsIndexLazyRoute;
  AuthorizationTasksIndexLazyRoute: typeof AuthorizationTasksIndexLazyRoute;
  AuthorizationExamplesFormAdvancedLazyRoute: typeof AuthorizationExamplesFormAdvancedLazyRoute;
  AuthorizationExamplesFormBasicLazyRoute: typeof AuthorizationExamplesFormBasicLazyRoute;
  AuthorizationExamplesFormSimpleLazyRoute: typeof AuthorizationExamplesFormSimpleLazyRoute;
  AuthorizationExamplesListIndexRoute: typeof AuthorizationExamplesListIndexRoute;
}

const AuthorizationRouteChildren: AuthorizationRouteChildren = {
  AuthorizationIndexRoute: AuthorizationIndexRoute,
  AuthorizationDashboardCustomersLazyRoute:
    AuthorizationDashboardCustomersLazyRoute,
  AuthorizationDashboardMonitorLazyRoute:
    AuthorizationDashboardMonitorLazyRoute,
  AuthorizationDashboardOverviewLazyRoute:
    AuthorizationDashboardOverviewLazyRoute,
  AuthorizationDashboardProductsLazyRoute:
    AuthorizationDashboardProductsLazyRoute,
  AuthorizationDashboardSettingsLazyRoute:
    AuthorizationDashboardSettingsLazyRoute,
  AuthorizationSystemSettingsLazyRoute: AuthorizationSystemSettingsLazyRoute,
  AuthorizationSystemUserLazyRoute: AuthorizationSystemUserLazyRoute,
  AuthorizationSystemUsersLazyRoute: AuthorizationSystemUsersLazyRoute,
  AuthorizationDashboardIndexRoute: AuthorizationDashboardIndexRoute,
  AuthorizationAppsIndexLazyRoute: AuthorizationAppsIndexLazyRoute,
  AuthorizationChatsIndexLazyRoute: AuthorizationChatsIndexLazyRoute,
  AuthorizationTasksIndexLazyRoute: AuthorizationTasksIndexLazyRoute,
  AuthorizationExamplesFormAdvancedLazyRoute:
    AuthorizationExamplesFormAdvancedLazyRoute,
  AuthorizationExamplesFormBasicLazyRoute:
    AuthorizationExamplesFormBasicLazyRoute,
  AuthorizationExamplesFormSimpleLazyRoute:
    AuthorizationExamplesFormSimpleLazyRoute,
  AuthorizationExamplesListIndexRoute: AuthorizationExamplesListIndexRoute,
};

const AuthorizationRouteWithChildren = AuthorizationRoute._addFileChildren(
  AuthorizationRouteChildren,
);

export interface FileRoutesByFullPath {
  "": typeof AuthorizationRouteWithChildren;
  "/forgot-password": typeof AuthForgotPasswordRoute;
  "/otp": typeof AuthOtpRoute;
  "/sign-in": typeof AuthSignInRoute;
  "/sign-in-2": typeof AuthSignIn2Route;
  "/sign-up": typeof AuthSignUpRoute;
  "/coming-soon": typeof ErrorsComingSoonRoute;
  "/401": typeof Errors401LazyRoute;
  "/403": typeof Errors403LazyRoute;
  "/404": typeof Errors404LazyRoute;
  "/500": typeof Errors500LazyRoute;
  "/503": typeof Errors503LazyRoute;
  "/": typeof AuthorizationIndexRoute;
  "/dashboard/customers": typeof AuthorizationDashboardCustomersLazyRoute;
  "/dashboard/monitor": typeof AuthorizationDashboardMonitorLazyRoute;
  "/dashboard/overview": typeof AuthorizationDashboardOverviewLazyRoute;
  "/dashboard/products": typeof AuthorizationDashboardProductsLazyRoute;
  "/dashboard/settings": typeof AuthorizationDashboardSettingsLazyRoute;
  "/system/settings": typeof AuthorizationSystemSettingsLazyRoute;
  "/system/user": typeof AuthorizationSystemUserLazyRoute;
  "/system/users": typeof AuthorizationSystemUsersLazyRoute;
  "/dashboard": typeof AuthorizationDashboardIndexRoute;
  "/apps": typeof AuthorizationAppsIndexLazyRoute;
  "/chats": typeof AuthorizationChatsIndexLazyRoute;
  "/tasks": typeof AuthorizationTasksIndexLazyRoute;
  "/examples/form/advanced": typeof AuthorizationExamplesFormAdvancedLazyRoute;
  "/examples/form/basic": typeof AuthorizationExamplesFormBasicLazyRoute;
  "/examples/form/simple": typeof AuthorizationExamplesFormSimpleLazyRoute;
  "/examples/list": typeof AuthorizationExamplesListIndexRoute;
}

export interface FileRoutesByTo {
  "/forgot-password": typeof AuthForgotPasswordRoute;
  "/otp": typeof AuthOtpRoute;
  "/sign-in": typeof AuthSignInRoute;
  "/sign-in-2": typeof AuthSignIn2Route;
  "/sign-up": typeof AuthSignUpRoute;
  "/coming-soon": typeof ErrorsComingSoonRoute;
  "/401": typeof Errors401LazyRoute;
  "/403": typeof Errors403LazyRoute;
  "/404": typeof Errors404LazyRoute;
  "/500": typeof Errors500LazyRoute;
  "/503": typeof Errors503LazyRoute;
  "/": typeof AuthorizationIndexRoute;
  "/dashboard/customers": typeof AuthorizationDashboardCustomersLazyRoute;
  "/dashboard/monitor": typeof AuthorizationDashboardMonitorLazyRoute;
  "/dashboard/overview": typeof AuthorizationDashboardOverviewLazyRoute;
  "/dashboard/products": typeof AuthorizationDashboardProductsLazyRoute;
  "/dashboard/settings": typeof AuthorizationDashboardSettingsLazyRoute;
  "/system/settings": typeof AuthorizationSystemSettingsLazyRoute;
  "/system/user": typeof AuthorizationSystemUserLazyRoute;
  "/system/users": typeof AuthorizationSystemUsersLazyRoute;
  "/dashboard": typeof AuthorizationDashboardIndexRoute;
  "/apps": typeof AuthorizationAppsIndexLazyRoute;
  "/chats": typeof AuthorizationChatsIndexLazyRoute;
  "/tasks": typeof AuthorizationTasksIndexLazyRoute;
  "/examples/form/advanced": typeof AuthorizationExamplesFormAdvancedLazyRoute;
  "/examples/form/basic": typeof AuthorizationExamplesFormBasicLazyRoute;
  "/examples/form/simple": typeof AuthorizationExamplesFormSimpleLazyRoute;
  "/examples/list": typeof AuthorizationExamplesListIndexRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  "/_authorization": typeof AuthorizationRouteWithChildren;
  "/(Auth)/forgot-password": typeof AuthForgotPasswordRoute;
  "/(Auth)/otp": typeof AuthOtpRoute;
  "/(Auth)/sign-in": typeof AuthSignInRoute;
  "/(Auth)/sign-in-2": typeof AuthSignIn2Route;
  "/(Auth)/sign-up": typeof AuthSignUpRoute;
  "/(Errors)/coming-soon": typeof ErrorsComingSoonRoute;
  "/(Errors)/401": typeof Errors401LazyRoute;
  "/(Errors)/403": typeof Errors403LazyRoute;
  "/(Errors)/404": typeof Errors404LazyRoute;
  "/(Errors)/500": typeof Errors500LazyRoute;
  "/(Errors)/503": typeof Errors503LazyRoute;
  "/_authorization/": typeof AuthorizationIndexRoute;
  "/_authorization/dashboard/customers": typeof AuthorizationDashboardCustomersLazyRoute;
  "/_authorization/dashboard/monitor": typeof AuthorizationDashboardMonitorLazyRoute;
  "/_authorization/dashboard/overview": typeof AuthorizationDashboardOverviewLazyRoute;
  "/_authorization/dashboard/products": typeof AuthorizationDashboardProductsLazyRoute;
  "/_authorization/dashboard/settings": typeof AuthorizationDashboardSettingsLazyRoute;
  "/_authorization/system/settings": typeof AuthorizationSystemSettingsLazyRoute;
  "/_authorization/system/user": typeof AuthorizationSystemUserLazyRoute;
  "/_authorization/system/users": typeof AuthorizationSystemUsersLazyRoute;
  "/_authorization/dashboard/": typeof AuthorizationDashboardIndexRoute;
  "/_authorization/apps/": typeof AuthorizationAppsIndexLazyRoute;
  "/_authorization/chats/": typeof AuthorizationChatsIndexLazyRoute;
  "/_authorization/tasks/": typeof AuthorizationTasksIndexLazyRoute;
  "/_authorization/examples/form/advanced": typeof AuthorizationExamplesFormAdvancedLazyRoute;
  "/_authorization/examples/form/basic": typeof AuthorizationExamplesFormBasicLazyRoute;
  "/_authorization/examples/form/simple": typeof AuthorizationExamplesFormSimpleLazyRoute;
  "/_authorization/examples/list/": typeof AuthorizationExamplesListIndexRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths:
    | ""
    | "/forgot-password"
    | "/otp"
    | "/sign-in"
    | "/sign-in-2"
    | "/sign-up"
    | "/coming-soon"
    | "/401"
    | "/403"
    | "/404"
    | "/500"
    | "/503"
    | "/"
    | "/dashboard/customers"
    | "/dashboard/monitor"
    | "/dashboard/overview"
    | "/dashboard/products"
    | "/dashboard/settings"
    | "/system/settings"
    | "/system/user"
    | "/system/users"
    | "/dashboard"
    | "/apps"
    | "/chats"
    | "/tasks"
    | "/examples/form/advanced"
    | "/examples/form/basic"
    | "/examples/form/simple"
    | "/examples/list";
  fileRoutesByTo: FileRoutesByTo;
  to:
    | "/forgot-password"
    | "/otp"
    | "/sign-in"
    | "/sign-in-2"
    | "/sign-up"
    | "/coming-soon"
    | "/401"
    | "/403"
    | "/404"
    | "/500"
    | "/503"
    | "/"
    | "/dashboard/customers"
    | "/dashboard/monitor"
    | "/dashboard/overview"
    | "/dashboard/products"
    | "/dashboard/settings"
    | "/system/settings"
    | "/system/user"
    | "/system/users"
    | "/dashboard"
    | "/apps"
    | "/chats"
    | "/tasks"
    | "/examples/form/advanced"
    | "/examples/form/basic"
    | "/examples/form/simple"
    | "/examples/list";
  id:
    | "__root__"
    | "/_authorization"
    | "/(Auth)/forgot-password"
    | "/(Auth)/otp"
    | "/(Auth)/sign-in"
    | "/(Auth)/sign-in-2"
    | "/(Auth)/sign-up"
    | "/(Errors)/coming-soon"
    | "/(Errors)/401"
    | "/(Errors)/403"
    | "/(Errors)/404"
    | "/(Errors)/500"
    | "/(Errors)/503"
    | "/_authorization/"
    | "/_authorization/dashboard/customers"
    | "/_authorization/dashboard/monitor"
    | "/_authorization/dashboard/overview"
    | "/_authorization/dashboard/products"
    | "/_authorization/dashboard/settings"
    | "/_authorization/system/settings"
    | "/_authorization/system/user"
    | "/_authorization/system/users"
    | "/_authorization/dashboard/"
    | "/_authorization/apps/"
    | "/_authorization/chats/"
    | "/_authorization/tasks/"
    | "/_authorization/examples/form/advanced"
    | "/_authorization/examples/form/basic"
    | "/_authorization/examples/form/simple"
    | "/_authorization/examples/list/";
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  AuthorizationRoute: typeof AuthorizationRouteWithChildren;
  AuthForgotPasswordRoute: typeof AuthForgotPasswordRoute;
  AuthOtpRoute: typeof AuthOtpRoute;
  AuthSignInRoute: typeof AuthSignInRoute;
  AuthSignIn2Route: typeof AuthSignIn2Route;
  AuthSignUpRoute: typeof AuthSignUpRoute;
  ErrorsComingSoonRoute: typeof ErrorsComingSoonRoute;
  Errors401LazyRoute: typeof Errors401LazyRoute;
  Errors403LazyRoute: typeof Errors403LazyRoute;
  Errors404LazyRoute: typeof Errors404LazyRoute;
  Errors500LazyRoute: typeof Errors500LazyRoute;
  Errors503LazyRoute: typeof Errors503LazyRoute;
}

const rootRouteChildren: RootRouteChildren = {
  AuthorizationRoute: AuthorizationRouteWithChildren,
  AuthForgotPasswordRoute: AuthForgotPasswordRoute,
  AuthOtpRoute: AuthOtpRoute,
  AuthSignInRoute: AuthSignInRoute,
  AuthSignIn2Route: AuthSignIn2Route,
  AuthSignUpRoute: AuthSignUpRoute,
  ErrorsComingSoonRoute: ErrorsComingSoonRoute,
  Errors401LazyRoute: Errors401LazyRoute,
  Errors403LazyRoute: Errors403LazyRoute,
  Errors404LazyRoute: Errors404LazyRoute,
  Errors500LazyRoute: Errors500LazyRoute,
  Errors503LazyRoute: Errors503LazyRoute,
};

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_authorization",
        "/(Auth)/forgot-password",
        "/(Auth)/otp",
        "/(Auth)/sign-in",
        "/(Auth)/sign-in-2",
        "/(Auth)/sign-up",
        "/(Errors)/coming-soon",
        "/(Errors)/401",
        "/(Errors)/403",
        "/(Errors)/404",
        "/(Errors)/500",
        "/(Errors)/503"
      ]
    },
    "/_authorization": {
      "filePath": "_authorization.tsx",
      "children": [
        "/_authorization/",
        "/_authorization/dashboard/customers",
        "/_authorization/dashboard/monitor",
        "/_authorization/dashboard/overview",
        "/_authorization/dashboard/products",
        "/_authorization/dashboard/settings",
        "/_authorization/system/settings",
        "/_authorization/system/user",
        "/_authorization/system/users",
        "/_authorization/dashboard/",
        "/_authorization/apps/",
        "/_authorization/chats/",
        "/_authorization/tasks/",
        "/_authorization/examples/form/advanced",
        "/_authorization/examples/form/basic",
        "/_authorization/examples/form/simple",
        "/_authorization/examples/list/"
      ]
    },
    "/(Auth)/forgot-password": {
      "filePath": "(Auth)/forgot-password.tsx"
    },
    "/(Auth)/otp": {
      "filePath": "(Auth)/otp.tsx"
    },
    "/(Auth)/sign-in": {
      "filePath": "(Auth)/sign-in.tsx"
    },
    "/(Auth)/sign-in-2": {
      "filePath": "(Auth)/sign-in-2.tsx"
    },
    "/(Auth)/sign-up": {
      "filePath": "(Auth)/sign-up.tsx"
    },
    "/(Errors)/coming-soon": {
      "filePath": "(Errors)/coming-soon.tsx"
    },
    "/(Errors)/401": {
      "filePath": "(Errors)/401.lazy.tsx"
    },
    "/(Errors)/403": {
      "filePath": "(Errors)/403.lazy.tsx"
    },
    "/(Errors)/404": {
      "filePath": "(Errors)/404.lazy.tsx"
    },
    "/(Errors)/500": {
      "filePath": "(Errors)/500.lazy.tsx"
    },
    "/(Errors)/503": {
      "filePath": "(Errors)/503.lazy.tsx"
    },
    "/_authorization/": {
      "filePath": "_authorization/index.tsx",
      "parent": "/_authorization"
    },
    "/_authorization/dashboard/customers": {
      "filePath": "_authorization/dashboard/customers.lazy.tsx",
      "parent": "/_authorization"
    },
    "/_authorization/dashboard/monitor": {
      "filePath": "_authorization/dashboard/monitor.lazy.tsx",
      "parent": "/_authorization"
    },
    "/_authorization/dashboard/overview": {
      "filePath": "_authorization/dashboard/overview.lazy.tsx",
      "parent": "/_authorization"
    },
    "/_authorization/dashboard/products": {
      "filePath": "_authorization/dashboard/products.lazy.tsx",
      "parent": "/_authorization"
    },
    "/_authorization/dashboard/settings": {
      "filePath": "_authorization/dashboard/settings.lazy.tsx",
      "parent": "/_authorization"
    },
    "/_authorization/system/settings": {
      "filePath": "_authorization/system/settings.lazy.tsx",
      "parent": "/_authorization"
    },
    "/_authorization/system/user": {
      "filePath": "_authorization/system/user.lazy.tsx",
      "parent": "/_authorization"
    },
    "/_authorization/system/users": {
      "filePath": "_authorization/system/users.lazy.tsx",
      "parent": "/_authorization"
    },
    "/_authorization/dashboard/": {
      "filePath": "_authorization/dashboard/index.tsx",
      "parent": "/_authorization"
    },
    "/_authorization/apps/": {
      "filePath": "_authorization/apps/index.lazy.tsx",
      "parent": "/_authorization"
    },
    "/_authorization/chats/": {
      "filePath": "_authorization/chats/index.lazy.tsx",
      "parent": "/_authorization"
    },
    "/_authorization/tasks/": {
      "filePath": "_authorization/tasks/index.lazy.tsx",
      "parent": "/_authorization"
    },
    "/_authorization/examples/form/advanced": {
      "filePath": "_authorization/examples/form/advanced.lazy.tsx",
      "parent": "/_authorization"
    },
    "/_authorization/examples/form/basic": {
      "filePath": "_authorization/examples/form/basic.lazy.tsx",
      "parent": "/_authorization"
    },
    "/_authorization/examples/form/simple": {
      "filePath": "_authorization/examples/form/simple.lazy.tsx",
      "parent": "/_authorization"
    },
    "/_authorization/examples/list/": {
      "filePath": "_authorization/examples/list/index.tsx",
      "parent": "/_authorization"
    }
  }
}
ROUTE_MANIFEST_END */
